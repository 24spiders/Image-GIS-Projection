# ------------------- GENERAL OPTIONS --------------------
# use_dsm: true                 # DSM for canopy boxes, else DTM for ground points
centroids: false               # when true, creates an additional shapefile for centroid of box in img2gis
output_path:
  img2gis: 'output/img2gis'     # shapefile (no out)
  gis2img: 'output/gis2img.csv' # csv type
# EPSG: 32611                     # epsg code, e.g. 32611 for WGS 84 / UTM zone 11N
                                  # NOTE: same EPSG as DSM will be used for shapefile 

# ------------------------ PATHS -------------------------
# NOTE: leave blanks where not applicable (e.g. batch_paths during single image projection)
paths:
  # aligned_cameras_csv_path: "examples/cameras.csv" # <PhotoID,X,Y,Z,Omega,Phi,Kappa,r11,r12,r13,r21,r22,r23,r31,r32,r33>, e.g. obtained from AgiSoft
  aligned_cameras_csv_path: "P:/Boisvert/20230816_Cynthia_P1B50mm100magl85s85f-no_cameras.txt" # <PhotoID,X,Y,Z,Omega,Phi,Kappa,r11,r12,r13,r21,r22,r23,r31,r32,r33>, e.g. obtained from AgiSoft
  dsm_path: "W:/EDM/RSGIS/gcastill/DATA/Cynthia/20230816/20230816_Cynthia_P1B50mm100magl85s85f_3cmDEMfromPointCloud.tif"                      # single dsm applies for all images in the batch, otherwise run script multiple times.
  # dsm_path: "examples/rasters/dsm.tif"                      # single dsm applies for all images in the batch, otherwise run script multiple times.
                                                   # NOTE: make sure values in DSM correspond to elliopsoidal height, not over the geode
  # specific options for single/batch processing
  single_cfg:
    # <id,points>, e.g. <1,"[(x1,y1),(x2,y2),...]"> -- one row for each box/shape
    img_path: "examples/single/DJI_20230706035613_0586.JPG"

    # input paths for the two different 
    img2gis:   
      points_csv: "examples/single/img2gis_test_points_oblique.csv" # image pixel coordinates
      out_shp:    "output/img2gis"
    gis2img:
      points_shp: "examples/single/gis2img_test"            # no extension for shapefile -- UTM coordinates, will be read using geopandas after appending '.shp'
      out_csv: "output/gis2img.csv"


  batch_cfg:
    img_dir: "examples/batch"

    img2gis:
      points_csv: "P:/Boisvert/Preds_20230816_CynthiaP1B50mm75magl85s85s.csv"  # <id,image_path(relative to img_dir),box_id,points> -- same as for single paths
      # points_csv: "P:/Boisvert/trial 2.csv"  # <id,image_path(relative to img_dir),box_id,points> -- same as for single paths
      # points_csv: "examples/batch/img2gis_batch_test_points.csv"  # <id,image_path(relative to img_dir),box_id,points> -- same as for single paths
      out_shp:    "P:/Boisvert/projection_ouput/all_projections_2"
    gis2img:
      points_shp: "examples/batch/gis2img_test"            # no extension for shapefile -- UTM coordinates, will be read using geopandas
      out_csv: "output/gis2img_batch.csv"


# ----------------- PROCESSING OPTIONS ------------------
img2gis:
  boundary: 10                   # median of boundary x boundary pixels from DSM is taken
  show_box: false                # when true, each box is shown on the input image
  coarse_height_increment: 0.5   # starting increment for H in coarse to fine strategy of ray tracing/dsm interception
  fine_height_increment: 0.01    # fine increment for H in coarse to fine strategy of ray tracing/dsm interception
  coarse_tolerance: 4            # when difference in current and DSM-given height is < this, move to fine strategy
  fine_tolerance: 0.2            # when < this, stop (we are close enough)

gis2img:
  boundary: 5                   # median of boundary x boundary pixels from DSM is taken


# ----------- CAMERA CALIBRATION INFORMATION ------------
# Default information is for a DJI P1 as an example
# If distortion parameters unknown, leave blank, but the first FIVE MUST be given. 

# if the pixel (detector) size in microns is known and the focal length is given in mm, the required values can be computed as:
# sw = ncols * (psz/1000000); sh = nrows * (psz/1000000); and f = 1000 * fmm / psz)
# where ncols is the number of columns of the image, nrows same but with rows, psz is the detector size in microns, and fmm is the focal length in millimeters



camera_calibration:
  sw: 0.03596288       # ---> sensor_width       (meters)
  sh: 0.0239694        # ---> sensor_height      (meters)
  f : 11018.8          # ---> focal_length       (pixels)
  cx: -10.8655         # -+-> principal point    (pixels, exact center would be 0,0)
  cy: 23.1932          # _|
  k1: -0.00584836      # -+-> radial distortions
  k2: -0.274308        #  |
  k3: -0.417769        #  |
  k4: 0.0              # _|
  p1: -0.000460076     # -+-> tangential distortions
  p2: 0.000393682      # _|
  b1: 0         # -+-> skew
  b2: 0        # _|

  # get the following from the EXIF header of any image in the dataset:
  image_height: 5460   # in pixels
  image_width: 8192    # in pixels
  focal: 0.05          # focal length in meters (usually 50mm)


